{% extends "../templates/study.njk" %}

{% block page %}scitech-color{% endblock %}

{% block palette %}
  <div>
    <svg class="scitech-1" width="285.526" height="274.545" viewBox="0 0 285.526 274.545"><defs></defs><path class="a" d="M165,0l55,95-55,95H55L0,95,55,0Z" transform="translate(95) rotate(30)"/></svg>            
    <label>#432ab0</label>
  </div>
  <div>
    <svg class="scitech-2" width="285.526" height="274.545" viewBox="0 0 285.526 274.545"><defs></defs><path class="a" d="M165,0l55,95-55,95H55L0,95,55,0Z" transform="translate(95) rotate(30)"/></svg>            
    <label>#56cfe1</label>
  </div>
  <div>
    <svg class="scitech-3" width="285.526" height="274.545" viewBox="0 0 285.526 274.545"><defs></defs><path class="a" d="M165,0l55,95-55,95H55L0,95,55,0Z" transform="translate(95) rotate(30)"/></svg>            
    <label>#f1f2f3</label>
  </div>
{% endblock %}

{% block hexagonR %}
<svg class="study-hexagons-scitech-right" width="100%" height="100%" viewBox="0 0 285 275"><path d="M165,0l55,95-55,95H55L0,95,55,0Z" transform="translate(95) rotate(30)"/></svg>
{% endblock %}
{% block hexagonL %}
<svg class="study-hexagons-scitech-left" width="100%" height="100%" viewBox="0 0 285 275"><path d="M165,0l55,95-55,95H55L0,95,55,0Z" transform="translate(95) rotate(30)"/></svg>
{% endblock %}

{% block head %}
<title>Scitech Exhibit - a case study</title>
{% endblock %}

{% block tools %}
<img src="*/../../imgs/icons/sass.svg">
<img src="*/../../imgs/icons/jquery.png">
{% endblock %}

{% block title %}
Scitech Exhibit
{% endblock %}

{% block subtext %}
Learning JavaScript with a practical project.
{% endblock %}

{% block intro %}
After being introduced to web design through building a number of small, static projects, I began to explore the world of JavaScript and jQuery.
{% endblock %}

{% block overview %}
<p>
We were tasked with building a website based around a particular exhibit found at Scitech, a science and technology museum in Perth aimed at kids and young teenagers.  After having far too much fun for my age playing with a heap of the exhibits, I settled on a display that demonstrated the many uses of laser technology.  The machine showed how a computer-controlled laser could reactively trace and bounce off objects placed in its path.
Ideas started to come to mind with regard to how I could make this work in JavaScript, my idea being to create something interactive and fun. 
The target audience for this project would be pre-teens and young teenagers aged 11-14.
</p>
{% endblock %}

{% block design %}
<p>
The design needed to be easy to navigate for younger audiences, be fully responsive (as the target audience often browse the web on tablets).  Bold buttons, a large typeface and eye-catching media would be necessary for creating a successful design.
I settled on a video of a very fancy laser display at an EDM festival, as it was eye catching whilst still being on topic.  The home page features three slides, functioning like a short interactive slideshow, giving information about lasers and their use in the real world.
<br>
The interactive laser component was designed to be straight-forward and simple.  A box contains the laser itself, with a control panel positioned to the side with two buttons.
<br>
My original designs stuck with the Scitech orange as the highlight colour, however I didn't feel this fitted with the 'neon' aesthetic I was going for.  I decided on a palette of cool blues, purples and greys instead.
</p>
{% endblock %}

{% block technical %}

<h3>Coding the interactivity</h3> 
<p>Each slide is manipulated using the Fullpage.js plugin.  This is an easy, responsive and backwards-compatible JS plugin that allows building slideshow-like cards and smoothly animating between them.  Each slide has a unique hash, making them linkable through a navbar or hamburger menu.</p>
<h3>The Quiz</h3>
<p>When rebuilding the quiz component, I chose to take a complete different route.  In this sites original form, quiz answers were stored as <code>"data_value"</code> entries inline for each possible answers, with a <code>1</code> for a correct answer and <code>0</code> for an incorrect answer.  This allowed for easy deciphering of the quiz answers upon inspecting the code in the browser.
The revised version instead stores questions as javascript objects, which are appended to a container div.  Correct answers are stored as <code>booleans</code> and checked whenever the user presses on an answer. </p>
<div class="code-wrapper">
<pre><code>
"user_collection": [

  "object": {

    "collectionObj": {
      "id",
      "artistName",
      "cover_image",
      "discogsURL",
      "genre",
      "label",
      "style",
      "title",
      "year"
      },

    "format": "*release format as string*" 

  },

]
</code></pre>
</div>
<h3>The Experiment</h3>
<p>The experiment was a completely new addition to the site, replacing the old bouncing-lasers animation that was previously featured.  A JS class and constructor were used to easily create each laser part.  The part objects were looped through and given an event listener that would set their value to 'active'.
</p>

<h3>The constructor used to generate laser parts</h3>
<div class="code-wrapper">
<pre><code>
class Parts {
    constructor(number, position, name, description, image) {
        this.number = number;
        this.position = position;
        this.name = name;
        this.description = description;
        this.image = image;
    }
}
</code></pre>
</div>

<h3>An example of a part being generated using the Parts class constructor</h3>
<div class="code-wrapper">
<pre><code>
const P1 = new Parts(1, 4, 'Focussing Mirror', 'A focussing lens', './imgs/laser/parts/mirror.svg');
</code></pre>
</div>

<h3>Looping through and adding listeners to each part item</h3>
<div class="code-wrapper">
<pre><code>
part.el.addEventListener("click", () => {
    const allParts = document.querySelectorAll('.ex-part');
    allParts.forEach(part => {
        part.classList.remove("ex-active");
    })
    part.el.classList.add("ex-active");
    Experiment.active = part.position;
    
})
</code></pre>
</div>


{% endblock %}

{% block conclusion %}
<p>
My first experience with JavaScript openep up so many opportunities for future projects.
</p>
{% endblock %}

{# IMAGES #}
{% block imgOne %}
"../imgs/studies/scitech/main.png"
{% endblock %}

{% block headImg %}
<svg class="header-svg" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1920 475.25" preserveAspectRatio="none">
  <path id="Path_1" data-name="Path 1" d="M0,0V377.368s410.526,197.368,729.474,31.579,442.105,116.842,631.579,50.526,420-151.579,495.79-82.105,64.737,58.421,64.737,58.421V0Z" fill="#3726d1"/>
</svg>{% endblock %}

{% block designImg %}
<img src="*/../../imgs/studies/scitech/mockup-1.jpg">
{% endblock %}